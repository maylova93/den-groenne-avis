import { createContext, useState, useEffect } from "react";

// ğŸ”¹ Opretter en kontekst til brugerdata
export const UserContext = createContext();

// ğŸ”¹ Provider-komponent, der gÃ¸r brugerdata tilgÃ¦ngelig i hele appen
export const UserContextProvider = ({ children }) => {
  // ğŸ”¹ useState til at hÃ¥ndtere brugerdata, forsÃ¸ger at hente tidligere gemte data fra sessionStorage
  const [userData, setUserData] = useState(() => {
    const storedUser = sessionStorage.getItem("user"); // ğŸ”¹ Henter brugerdata fra sessionStorage
    return storedUser ? JSON.parse(storedUser) : null; // ğŸ”¹ Hvis data findes, parse JSON, ellers returner `null`
  });

  // ğŸ”¹ useEffect til at opdatere sessionStorage, hver gang userData Ã¦ndres
  useEffect(() => {
    if (userData) {
      console.log("ğŸ”¹ Opdateret brugerdata:", userData); // ğŸ”¹ Debugging - viser brugerdata i konsollen
      sessionStorage.setItem("user", JSON.stringify(userData)); // ğŸ”¹ Gemmer brugerdata i sessionStorage
    } else {
      sessionStorage.removeItem("user"); // ğŸ”¹ Hvis `userData` er `null`, fjernes det fra sessionStorage
    }
  }, [userData]); // ğŸ”¹ KÃ¸rer hver gang `userData` Ã¦ndres

  // ğŸ”¹ Funktion til at logge brugeren ud
  const logout = (navigate) => {
    sessionStorage.removeItem("user"); // ğŸ”¹ Fjerner brugerdata fra sessionStorage
    setUserData(null); // ğŸ”¹ Opdaterer `userData` til `null`, sÃ¥ appen registrerer at brugeren er logget ud
    if (navigate) navigate("/"); // ğŸ”¹ Hvis der sendes en `navigate`-funktion, send brugeren til forsiden
  };

  return (
    // ğŸ”¹ GÃ¸r `userData`, `setUserData` og `logout` tilgÃ¦ngelige for resten af applikationen
    <UserContext.Provider value={{ userData, setUserData, logout }}>
      {children} {/* ğŸ”¹ Viser child-komponenterne */}
    </UserContext.Provider>
  );
};
